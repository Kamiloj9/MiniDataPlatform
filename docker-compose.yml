services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    networks:
      - app_network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST}
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT}
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    networks:
      - app_network
    healthcheck:
      test: >
        /bin/sh -c 'curl --silent --fail http://localhost:${SCHEMA_REGISTRY_PORT:-8081} || exit 1'
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:16
    container_name: my_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - app_network

  connect:
    build: ./connect
    depends_on:
      - kafka
      - postgres
      - schema-registry
    restart: on-failure
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BROKER}
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: connect_configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect_offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://${SCHEMA_REGISTRY_HOST}:${SCHEMA_REGISTRY_PORT}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://${SCHEMA_REGISTRY_HOST}:${SCHEMA_REGISTRY_PORT}
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST}
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    ports:
      - "8083:8083"
    networks:
      - app_network
    healthcheck:
      test: curl --silent --fail http://localhost:8083 || exit 1
      interval: 10s
      retries: 10

  init-connector:
    build: ./init-connector
    depends_on:
      connect:
        condition: service_healthy
    networks:
      - app_network
    env_file:
      - .env

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app_network

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set local http://minio:9000 ${MINIO_USER} ${MINIO_PASS};
      mc ls local/${MINIO_BUCKET} || mc mb -p local/${MINIO_BUCKET};
      mc policy set public local/${MINIO_BUCKET} || true;
      exit 0;"
    networks:
      - app_network

  spark-app:
    build: ./spark-app
    depends_on:
      init-connector:
        condition: service_completed_successfully
    networks:
      - app_network
    env_file:
      - .env

volumes:
  postgres_data:
  minio_data:

networks:
  app_network:
